-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

-- 8-line to 3-Line priority encoder
entity n74148 is
  port (
    EI: in std_logic;
    n0: in std_logic;
    n1: in std_logic;
    n2: in std_logic;
    n3: in std_logic;
    n4: in std_logic;
    n5: in std_logic;
    n6: in std_logic;
    n7: in std_logic;
    VCC: in std_logic;
    GND: in std_logic;
    A2: out std_logic;
    A1: out std_logic;
    A0: out std_logic;
    GS: out std_logic;
    E0: out std_logic);
end n74148;

architecture Behavioral of n74148 is
  signal s0: std_logic;
  signal s1: std_logic;
  signal s2: std_logic;
  signal s3: std_logic;
begin
  A2 <= ((n4 AND n5 AND n6 AND n7) OR EI);
  GS <= ((n0 AND n1 AND n2 AND n3 AND n4 AND n5 AND n6 AND n7) OR EI);
  s2 <= NOT n2;
  s0 <= NOT n4;
  s1 <= NOT n5;
  s3 <= NOT n6;
  A1 <= ((n2 AND n3 AND n6 AND n7) OR (s0 AND n6 AND n7) OR (s1 AND n6 AND n7) OR EI);
  A0 <= ((n1 AND n3 AND n5 AND n7) OR (s2 AND n3 AND n5 AND n7) OR (s0 AND n5 AND n7) OR (s3 AND n7) OR EI);
  E0 <= (NOT n0 OR NOT n1 OR s2 OR NOT n3 OR s0 OR s1 OR s3 OR NOT n7 OR EI);
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;
entity DIG_D_FF_BUS is
  generic (
    Default: integer; 
    Bits: integer );
  port ( D  : in std_logic_vector ((Bits-1) downto 0);
         C  : in std_logic;
         Q  : out std_logic_vector ((Bits-1) downto 0);
         notQ : out std_logic_vector ((Bits-1) downto 0) );
end DIG_D_FF_BUS;

architecture Behavioral of DIG_D_FF_BUS is
   signal state : std_logic_vector ((Bits-1) downto 0) := std_logic_vector(to_unsigned(Default, Bits));
begin
   Q    <= state;
   notQ <= NOT( state );

   process(C)
   begin
      if rising_edge(C) then
        state  <= D;
      end if;
   end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity DRIVER_INV_GATE_BUS is
  generic ( Bits : integer ); 
  port (
    p_out: out std_logic_vector ((Bits-1) downto 0);
    p_in: in std_logic_vector ((Bits-1) downto 0);
    sel: in std_logic );
end DRIVER_INV_GATE_BUS;

architecture Behavioral of DRIVER_INV_GATE_BUS is
begin
  p_out <= p_in when sel = '0' else (others => 'Z');
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

-- octal positive-edge-triggered flip-flops, different pinout compared to 74374
entity n74574 is
  port (
    notOC: in std_logic;
    CLK: in std_logic;
    D0: in std_logic;
    D1: in std_logic;
    D2: in std_logic;
    D3: in std_logic;
    D4: in std_logic;
    D5: in std_logic;
    D6: in std_logic;
    D7: in std_logic;
    VCC: in std_logic;
    GND: in std_logic;
    Q0: out std_logic;
    Q1: out std_logic;
    Q2: out std_logic;
    Q3: out std_logic;
    Q4: out std_logic;
    Q5: out std_logic;
    Q6: out std_logic;
    Q7: out std_logic);
end n74574;

architecture Behavioral of n74574 is
  signal s0: std_logic_vector(7 downto 0);
  signal s1: std_logic_vector(7 downto 0);
  signal s2: std_logic_vector(7 downto 0);
begin
  s0(0) <= D0;
  s0(1) <= D1;
  s0(2) <= D2;
  s0(3) <= D3;
  s0(4) <= D4;
  s0(5) <= D5;
  s0(6) <= D6;
  s0(7) <= D7;
  gate0: entity work.DIG_D_FF_BUS
    generic map (
      Default => 0,
      Bits => 8)
    port map (
      D => s0,
      C => CLK,
      Q => s1);
  gate1: entity work.DRIVER_INV_GATE_BUS
    generic map (
      Bits => 8)
    port map (
      p_in => s1,
      sel => notOC,
      p_out => s2);
  Q0 <= s2(0);
  Q1 <= s2(1);
  Q2 <= s2(2);
  Q3 <= s2(3);
  Q4 <= s2(4);
  Q5 <= s2(5);
  Q6 <= s2(6);
  Q7 <= s2(7);
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity DIG_D_FF is
  generic (
    Default: std_logic ); 
  port ( D  : in std_logic;
         C  : in std_logic;
         Q  : out std_logic;
         notQ : out std_logic );
end DIG_D_FF;

architecture Behavioral of DIG_D_FF is
   signal state : std_logic := Default;
begin
   Q    <= state;
   notQ <= NOT( state );

   process(C)
   begin
      if rising_edge(C) then
        state  <= D;
      end if;
   end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

-- 4-bit comparator
entity n7485 is
  port (
    PleQ_i: in std_logic;
    PeqQ_i: in std_logic;
    PgrQ_i: in std_logic;
    P_0: in std_logic;
    P_1: in std_logic;
    P_2: in std_logic;
    P_3: in std_logic;
    Q_0: in std_logic;
    Q_1: in std_logic;
    Q_2: in std_logic;
    Q_3: in std_logic;
    VCC: in std_logic;
    GND: in std_logic;
    PleQ: out std_logic;
    PeqQ: out std_logic;
    PgrQ: out std_logic);
end n7485;

architecture Behavioral of n7485 is
  signal s0: std_logic;
  signal s1: std_logic;
  signal s2: std_logic;
  signal s3: std_logic;
  signal s4: std_logic;
  signal s5: std_logic;
  signal s6: std_logic;
  signal s7: std_logic;
begin
  s0 <= NOT (P_0 AND Q_0);
  s2 <= NOT (P_1 AND Q_1);
  s4 <= NOT (P_2 AND Q_2);
  s6 <= NOT (P_3 AND Q_3);
  s1 <= NOT ((P_0 AND s0) OR (s0 AND Q_0));
  s3 <= NOT ((P_1 AND s2) OR (s2 AND Q_1));
  s5 <= NOT ((P_2 AND s4) OR (s4 AND Q_2));
  s7 <= NOT ((P_3 AND s6) OR (s6 AND Q_3));
  PgrQ <= (NOT (Q_3 AND s6) AND NOT (Q_2 AND s4 AND s7) AND NOT (Q_1 AND s2 AND s7 AND s5) AND NOT (Q_0 AND s0 AND s7 AND s5 AND s3) AND NOT (s7 AND s5 AND s3 AND s1 AND PleQ_i) AND NOT (s7 AND s5 AND s3 AND s1 AND PeqQ_i));
  PeqQ <= (s7 AND s5 AND PeqQ_i AND s3 AND s1);
  PleQ <= (NOT (PeqQ_i AND s1 AND s3 AND s5 AND s7) AND NOT (PgrQ_i AND s1 AND s5 AND s3 AND s7) AND NOT (s3 AND s5 AND s7 AND s0 AND P_0) AND NOT (s5 AND s7 AND s2 AND P_1) AND NOT (s7 AND s4 AND P_2) AND NOT (s6 AND P_3));
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity main is
  port (
    nIRQ14: in std_logic;
    nIRQ13: in std_logic;
    nIRQ12: in std_logic;
    nIRQ11: in std_logic;
    nIRQ10: in std_logic;
    nIRQ9: in std_logic;
    nIRQ3: in std_logic;
    nIRQ2: in std_logic;
    nIRQ1: in std_logic;
    nIRQ0: in std_logic;
    nIRQ4: in std_logic;
    nIRQ5: in std_logic;
    nIRQ6: in std_logic;
    nIRQ7: in std_logic;
    nIRQ8: in std_logic;
    nRD: in std_logic;
    nIRQ_EN: in std_logic;
    nWR: in std_logic;
    InD0: in std_logic;
    InD1: in std_logic;
    InD2: in std_logic;
    InD3: in std_logic;
    Q: in std_logic;
    nIRQ: out std_logic;
    D0: out std_logic;
    D1: out std_logic;
    D2: out std_logic;
    D3: out std_logic;
    D4: out std_logic;
    D5: out std_logic;
    D6: out std_logic;
    D7: out std_logic);
end main;

architecture Behavioral of main is
  signal s0: std_logic;
  signal s1: std_logic;
  signal s2: std_logic;
  signal s3: std_logic;
  signal s4: std_logic;
  signal s5: std_logic;
  signal s6: std_logic;
  signal s7: std_logic;
  signal s8: std_logic;
  signal s9: std_logic;
  signal s10: std_logic;
  signal s11: std_logic;
  signal s12: std_logic;
  signal s13: std_logic;
  signal s14: std_logic;
  signal s15: std_logic;
  signal s16: std_logic;
  signal s17: std_logic;
  signal s18: std_logic;
  signal s19: std_logic;
  signal s20: std_logic;
  signal s21: std_logic;
  signal s22: std_logic;
  signal s23: std_logic;
  signal s24: std_logic;
  signal s25: std_logic;
  signal s26: std_logic;
begin
  gate0: entity work.n74148
    port map (
      n4 => nIRQ3,
      n5 => nIRQ2,
      n6 => nIRQ1,
      n7 => nIRQ0,
      EI => '0',
      GND => '0',
      n0 => nIRQ7,
      n1 => nIRQ6,
      n2 => nIRQ5,
      n3 => nIRQ4,
      VCC => '1',
      A2 => s4,
      A1 => s5,
      A0 => s6,
      GS => s7,
      E0 => s0);
  s18 <= NOT (nRD OR nIRQ_EN);
  s17 <= NOT (nIRQ_EN OR nWR);
  gate1: entity work.n74148
    port map (
      n4 => nIRQ11,
      n5 => nIRQ10,
      n6 => nIRQ9,
      n7 => nIRQ8,
      EI => s0,
      GND => '0',
      n0 => '1',
      n1 => nIRQ14,
      n2 => nIRQ13,
      n3 => nIRQ12,
      VCC => '1',
      A2 => s1,
      A1 => s2,
      A0 => s3);
  s11 <= NOT (s7 AND s7);
  gate2: entity work.n74574 -- InputRegister
    port map (
      notOC => '0',
      D0 => InD0,
      D1 => InD1,
      D2 => InD2,
      D3 => InD3,
      D4 => '0',
      D5 => '0',
      D6 => '0',
      D7 => '0',
      GND => '0',
      CLK => s17,
      VCC => '1',
      Q3 => s16,
      Q2 => s15,
      Q1 => s14,
      Q0 => s13);
  s8 <= NOT (s1 AND s4);
  s9 <= NOT (s2 AND s5);
  s10 <= NOT (s3 AND s6);
  gate3: entity work.DIG_D_FF
    generic map (
      Default => '0')
    port map (
      D => s11,
      C => Q,
      Q => s22);
  gate4: entity work.DIG_D_FF
    generic map (
      Default => '0')
    port map (
      D => s13,
      C => Q,
      Q => s23);
  gate5: entity work.DIG_D_FF
    generic map (
      Default => '0')
    port map (
      D => s14,
      C => Q,
      Q => s24);
  gate6: entity work.DIG_D_FF
    generic map (
      Default => '0')
    port map (
      D => s15,
      C => Q,
      Q => s25);
  gate7: entity work.DIG_D_FF
    generic map (
      Default => '0')
    port map (
      D => s16,
      C => Q,
      Q => s26);
  gate8: entity work.n7485
    port map (
      Q_3 => s11,
      PleQ_i => '0',
      PeqQ_i => '0',
      PgrQ_i => '0',
      GND => '0',
      Q_0 => s10,
      P_0 => s13,
      Q_1 => s9,
      P_1 => s14,
      P_2 => s15,
      Q_2 => s8,
      P_3 => s16,
      VCC => '1',
      PleQ => s12);
  gate9: entity work.DIG_D_FF
    generic map (
      Default => '0')
    port map (
      D => s10,
      C => Q,
      Q => s19);
  gate10: entity work.DIG_D_FF
    generic map (
      Default => '0')
    port map (
      D => s9,
      C => Q,
      Q => s20);
  gate11: entity work.DIG_D_FF
    generic map (
      Default => '0')
    port map (
      D => s8,
      C => Q,
      Q => s21);
  D3 <= (s18 AND s22);
  D4 <= (s18 AND s23);
  D5 <= (s18 AND s24);
  D6 <= (s18 AND s25);
  D7 <= (s18 AND s26);
  nIRQ <= NOT (s12 OR s12);
  D0 <= (s18 AND s19);
  D1 <= (s18 AND s20);
  D2 <= (s18 AND s21);
end Behavioral;
